{
  "address": "0x6c26E2A59D6A1F538AE600759FD851C81B77041C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITakeProfit",
          "name": "_takeProfit",
          "type": "address"
        },
        {
          "internalType": "contract IPositionsManager",
          "name": "_positionsManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionsManager",
      "outputs": [
        {
          "internalType": "contract IPositionsManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPositionsManager",
          "name": "newPositionsManager",
          "type": "address"
        }
      ],
      "name": "setPositionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITakeProfit",
          "name": "newTakeProfit",
          "type": "address"
        }
      ],
      "name": "setTakeProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takeProfit",
      "outputs": [
        {
          "internalType": "contract ITakeProfit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7cd7bba48098588ea3f285c75cb9e90d4551a993d26ee2413aa5c9ff593098b3",
  "receipt": {
    "to": null,
    "from": "0x0641bc55DDAb3b9636e82CbF87EDE3c3c533039d",
    "contractAddress": "0x6c26E2A59D6A1F538AE600759FD851C81B77041C",
    "transactionIndex": 1,
    "gasUsed": "10329440",
    "logsBloom": "0x
    "blockHash": "0x51e790ab6531154b6201355e40489e6f464e65fcb113067cb58240880cc5046c",
    "transactionHash": "0x7cd7bba48098588ea3f285c75cb9e90d4551a993d26ee2413aa5c9ff593098b3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 147710079,
        "transactionHash": "0x7cd7bba48098588ea3f285c75cb9e90d4551a993d26ee2413aa5c9ff593098b3",
        "address": "0x6c26E2A59D6A1F538AE600759FD851C81B77041C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000641bc55ddab3b9636e82cbf87ede3c3c533039d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x51e790ab6531154b6201355e40489e6f464e65fcb113067cb58240880cc5046c"
      }
    ],
    "blockNumber": 147710079,
    "cumulativeGasUsed": "10329440",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ac2FC6bEdEF901a2fFcA0dF63259bE5FFbc4b2f",
    "0x5Fe380D68fEe022d8acd42dc4D36FbfB249a76d5"
  ],
  "numDeployments": 2,
  "solcInputHash": "bdde073e60c8bc2f2de1df8415ab9153",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITakeProfit\",\"name\":\"_takeProfit\",\"type\":\"address\"},{\"internalType\":\"contract IPositionsManager\",\"name\":\"_positionsManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionsManager\",\"outputs\":[{\"internalType\":\"contract IPositionsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPositionsManager\",\"name\":\"newPositionsManager\",\"type\":\"address\"}],\"name\":\"setPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITakeProfit\",\"name\":\"newTakeProfit\",\"type\":\"address\"}],\"name\":\"setTakeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeProfit\",\"outputs\":[{\"internalType\":\"contract ITakeProfit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UpkeepTakeProfit.sol\":\"UpkeepTakeProfit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IPositionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPositionsManager is IERC721 {\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n    function nextTokenId() external view returns (uint256);\\n}\",\"keccak256\":\"0x4c06bde46851de7230590243a139284144be18d58b6ec44febd55a9274aa600b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/ITakeProfit.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Sharwa.Finance\\n * Copyright (C) 2023 Sharwa.Finance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.0;\\n\\ninterface ITakeProfit {\\n    // STRUCTS //\\n\\n    /**\\n     * @dev Struct representing take profit information for a financial instrument.\\n     * @notice A `TakeInfo` with zero values indicates an inactive state.\\n     */\\n    struct TakeInfo {\\n        uint256 upperStopPrice; // The upper price threshold at which the take profit order triggers.         \\n        uint256 lowerStopPrice; // The lower price threshold at which the take profit order triggers.       \\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev Updates the global time to execution for all take profit orders.\\n     * @param newGlobalTimeToExecution The new global time duration, in seconds, before take profit orders are executed.\\n     * Requirements:\\n     * - Only the contract owner can set the new global time to execution.\\n     */\\n    function setGlobalTimeToExecution(uint256 newGlobalTimeToExecution) external;\\n\\n    // VIEW FUNCTIONS //\\n\\n    /**\\n     * @dev Retrieves the payoff amount for a specific token ID.\\n     * \\n     * @param tokenId The unique identifier of the token for which the payoff amount is requested.\\n     * \\n     * @return The calculated payoff amount for the specified token.\\n     */\\n    function getPayOffAmount(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the current price for a specific token ID.\\n     * \\n     * @param tokenId The unique identifier of the token for which the current price is requested.\\n     * \\n     * @return The current price for the specified token in the form of a uint256.\\n     * \\n     * Requirements:\\n     * - The price retrieved must not be zero, indicating a valid price.\\n     */\\n    function getCurrentPrice(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the expiration time for a specific token ID.\\n     * \\n     * @param tokenId The unique identifier of the token for which the expiration time is requested.\\n     * \\n     * @return The expiration time for the specified token in the form of a uint256.\\n     */\\n    function getExpirationTime(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Checks whether a specific option with the given tokenId is currently active.\\n     * \\n     * An active option means that it is in the 'Locked' state within the operational treasury.\\n     * \\n     * @param tokenId The unique identifier of the option token being checked.\\n     * \\n     * @return A boolean value indicating whether the option is currently active (true) or not (false).\\n     */\\n    function isOptionActive(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if the take profit conditions for a specific token have been triggered.\\n     * \\n     * @param tokenId The unique identifier of the token for which take profit is being checked.\\n     * \\n     * @return takeProfitTriggered Boolean indicating whether the take profit conditions have been triggered or not.\\n    */\\n    function checkTakeProfit(uint256 tokenId) external view returns (bool takeProfitTriggered);\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev Sets the take profit conditions for a specific token.\\n     * \\n     * @param tokenId The unique identifier of the token for which take profit is being set.\\n     * @param takeProfitParams A `TakeInfo` struct containing the upper and lower stop prices.\\n     * \\n     * Requirements:\\n     * - The caller must be the owner of the token.\\n     * - The contract must be approved to manage the specified token.\\n     * - The token's expiration date must not have passed.\\n     */\\n    function setTakeProfit(\\n        uint256 tokenId, \\n        TakeInfo calldata takeProfitParams\\n    ) external;\\n\\n    /**\\n     * @dev Deletes the take profit configuration for a specific token.\\n     * \\n     * This function allows the owner of a specified token to delete the associated take profit configuration.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit is being deleted.\\n     * \\n     * Requirements:\\n     * - The caller must be the owner of the token.\\n     * - A valid take profit configuration must exist for the token.\\n     */\\n    function deleteTakeProfit(uint256 tokenId) external;\\n\\n    /**\\n     * @dev Executes the take profit for a specific token.\\n     * \\n     * This function allows a user to execute the take profit conditions for a specified token.\\n     * If the take profit conditions are met, the associated action, such as transferring the token and\\n     * potentially paying off the profit, is executed.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit is being executed.\\n     * \\n     * Requirements:\\n     * - The take profit conditions must be met for the specified token.\\n     */\\n    function executeTakeProfit(uint256 tokenId) external;\\n\\n    // EVENTS // \\n\\n    /**\\n     * @dev An event emitted when a take profit configuration is set for a tokenized option.\\n     * \\n     * This event is triggered when a user successfully sets a take profit configuration for a specific tokenized option.\\n     * It includes details such as the token's unique identifier, upper and lower stop price conditions, \\n     * which define the range for triggering the take profit, and indicate when the take profit conditions are met.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit is being set.\\n     * @param user The address of the user setting the take profit configuration.\\n     * @param upperStopPrice The upper stop price condition for take profit (greater than or equal to).\\n     * @param lowerStopPrice The lower stop price condition for take profit (less than or equal to).\\n     */\\n    event TakeProfitSet(\\n        uint256 indexed tokenId, \\n        address indexed user,\\n        uint256 upperStopPrice,\\n        uint256 lowerStopPrice\\n    );\\n    \\n    /**\\n     * @dev An event emitted when a take profit configuration is deleted for a tokenized option.\\n     * \\n     * This event is triggered when a user successfully deletes the take profit configuration for a specific tokenized option.\\n     * It includes the unique identifier of the token for which the take profit configuration is deleted.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit configuration is deleted.\\n     */\\n    event TakeProfitDeleted(uint256 indexed tokenId);\\n    \\n    /**\\n     * @dev An event emitted when a take profit is executed for a tokenized option.\\n     * \\n     * This event is triggered when a take profit is successfully executed for a specific tokenized option.\\n     * It includes the unique identifier of the token for which the take profit is executed.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit is executed.\\n     * @param user The address of the user setting the take profit configuration.\\n     */\\n    event TakeProfitExecuted(\\n        uint256 indexed tokenId,\\n        address indexed user\\n    );\\n}\",\"keccak256\":\"0x6c898b18b02c69f5a3207f23ac4abe719b50e59c79da33c809c84a0218b05ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/UpkeepTakeProfit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ITakeProfit} from \\\"./ITakeProfit.sol\\\";\\nimport {IPositionsManager} from \\\"./IPositionsManager.sol\\\";\\n\\ncontract UpkeepTakeProfit is \\n    AutomationCompatibleInterface, \\n    Ownable\\n{\\n    ITakeProfit public takeProfit;\\n    IPositionsManager public positionsManager;\\n\\n    constructor(\\n        ITakeProfit _takeProfit,\\n        IPositionsManager _positionsManager\\n    ) {\\n        takeProfit = _takeProfit;\\n        positionsManager = _positionsManager;\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    function setTakeProfit(ITakeProfit newTakeProfit) external onlyOwner {\\n        takeProfit = newTakeProfit;\\n    }\\n\\n    function setPositionManager(IPositionsManager newPositionsManager) external onlyOwner {\\n        positionsManager = newPositionsManager;\\n    }\\n\\n    // EXTERNAL FUNCTIONS // \\n\\n    function checkUpkeep(\\n        bytes calldata checkData\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        (uint256 lowerBound, uint256 upperBound) = abi.decode(\\n            checkData,\\n            (uint256, uint256)\\n        );\\n\\n        uint256 lastTokenId = positionsManager.nextTokenId() - 1;\\n\\n        uint256 start = lastTokenId - upperBound;\\n        uint256 end = lastTokenId - lowerBound;\\n\\n        for (uint256 i = start; i <= end; i++) {\\n            if (takeProfit.checkTakeProfit(i)) {\\n                upkeepNeeded = true;\\n                performData = abi.encode(i);\\n                break;\\n            }\\n        }\\n        return (upkeepNeeded, performData);\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        (uint256 optionID) = abi.decode(\\n            performData,\\n            (uint256)\\n        );\\n        takeProfit.executeTakeProfit(optionID);\\n    }\\n}\\n\",\"keccak256\":\"0x4f7a3f39b2e75084fae926d22ef7d0abfe62c3f19dc325b04d8d2233d5d6a3cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200109e3803806200109e8339818101604052810190620000379190620001db565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002ac565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001be8162000278565b92915050565b600081519050620001d58162000292565b92915050565b60008060408385031215620001ef57600080fd5b6000620001ff85828601620001c4565b92505060206200021285828601620001ad565b9150509250929050565b6000620002298262000258565b9050919050565b60006200023d826200021c565b9050919050565b600062000251826200021c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002838162000230565b81146200028f57600080fd5b50565b6200029d8162000244565b8114620002a957600080fd5b50565b610de280620002bc6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806370c105781161006657806370c105781461011f578063715018a61461013d5780638da5cb5b1461014757806393c6176414610165578063f2fde38b1461018157610093565b80634585e33b1461009857806352f0f814146100b45780635760f2e3146100d25780636e04ff0d146100ee575b600080fd5b6100b260048036038101906100ad919061083d565b61019d565b005b6100bc610242565b6040516100c99190610ad7565b60405180910390f35b6100ec60048036038101906100e79190610882565b610268565b005b6101086004803603810190610103919061083d565b6102b4565b604051610116929190610aa7565b60405180910390f35b6101276104a6565b6040516101349190610af2565b60405180910390f35b6101456104cc565b005b61014f6104e0565b60405161015c9190610a8c565b60405180910390f35b61017f600480360381019061017a91906108ab565b610509565b005b61019b600480360381019061019691906107eb565b610555565b005b600082828101906101ae91906108d4565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352e80c64826040518263ffffffff1660e01b815260040161020b9190610b4d565b600060405180830381600087803b15801561022557600080fd5b505af1158015610239573d6000803e3d6000fd5b50505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102706105d9565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000606060008085858101906102ca9190610926565b9150915060006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037291906108fd565b61037c9190610b95565b90506000828261038c9190610b95565b90506000848361039c9190610b95565b905060008290505b81811161049957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0982e2c826040518263ffffffff1660e01b81526004016104069190610b4d565b60206040518083038186803b15801561041e57600080fd5b505afa158015610432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104569190610814565b156104865760019750806040516020016104709190610b4d565b6040516020818303038152906040529650610499565b808061049190610cb0565b9150506103a4565b5050505050509250929050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104d46105d9565b6104de6000610657565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105116105d9565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61055d6105d9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490610b0d565b60405180910390fd5b6105d681610657565b50565b6105e161071b565b73ffffffffffffffffffffffffffffffffffffffff166105ff6104e0565b73ffffffffffffffffffffffffffffffffffffffff1614610655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064c90610b2d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061073281610d39565b92915050565b60008151905061074781610d50565b92915050565b60008083601f84011261075f57600080fd5b8235905067ffffffffffffffff81111561077857600080fd5b60208301915083600182028301111561079057600080fd5b9250929050565b6000813590506107a681610d67565b92915050565b6000813590506107bb81610d7e565b92915050565b6000813590506107d081610d95565b92915050565b6000815190506107e581610d95565b92915050565b6000602082840312156107fd57600080fd5b600061080b84828501610723565b91505092915050565b60006020828403121561082657600080fd5b600061083484828501610738565b91505092915050565b6000806020838503121561085057600080fd5b600083013567ffffffffffffffff81111561086a57600080fd5b6108768582860161074d565b92509250509250929050565b60006020828403121561089457600080fd5b60006108a284828501610797565b91505092915050565b6000602082840312156108bd57600080fd5b60006108cb848285016107ac565b91505092915050565b6000602082840312156108e657600080fd5b60006108f4848285016107c1565b91505092915050565b60006020828403121561090f57600080fd5b600061091d848285016107d6565b91505092915050565b6000806040838503121561093957600080fd5b6000610947858286016107c1565b9250506020610958858286016107c1565b9150509250929050565b61096b81610bc9565b82525050565b61097a81610bdb565b82525050565b600061098b82610b68565b6109958185610b73565b93506109a5818560208601610c7d565b6109ae81610d28565b840191505092915050565b6109c281610c35565b82525050565b6109d181610c59565b82525050565b60006109e4602683610b84565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610a4a602083610b84565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b610a8681610c2b565b82525050565b6000602082019050610aa16000830184610962565b92915050565b6000604082019050610abc6000830185610971565b8181036020830152610ace8184610980565b90509392505050565b6000602082019050610aec60008301846109b9565b92915050565b6000602082019050610b0760008301846109c8565b92915050565b60006020820190508181036000830152610b26816109d7565b9050919050565b60006020820190508181036000830152610b4681610a3d565b9050919050565b6000602082019050610b626000830184610a7d565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610ba082610c2b565b9150610bab83610c2b565b925082821015610bbe57610bbd610cf9565b5b828203905092915050565b6000610bd482610c0b565b9050919050565b60008115159050919050565b6000610bf282610bc9565b9050919050565b6000610c0482610bc9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c4082610c47565b9050919050565b6000610c5282610c0b565b9050919050565b6000610c6482610c6b565b9050919050565b6000610c7682610c0b565b9050919050565b60005b83811015610c9b578082015181840152602081019050610c80565b83811115610caa576000848401525b50505050565b6000610cbb82610c2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cee57610ced610cf9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b610d4281610bc9565b8114610d4d57600080fd5b50565b610d5981610bdb565b8114610d6457600080fd5b50565b610d7081610be7565b8114610d7b57600080fd5b50565b610d8781610bf9565b8114610d9257600080fd5b50565b610d9e81610c2b565b8114610da957600080fd5b5056fea264697066735822122019ab5f15f8dbcb562f1ed69f67870f109ef4898d4d1371de0a64a576430ad8e864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806370c105781161006657806370c105781461011f578063715018a61461013d5780638da5cb5b1461014757806393c6176414610165578063f2fde38b1461018157610093565b80634585e33b1461009857806352f0f814146100b45780635760f2e3146100d25780636e04ff0d146100ee575b600080fd5b6100b260048036038101906100ad919061083d565b61019d565b005b6100bc610242565b6040516100c99190610ad7565b60405180910390f35b6100ec60048036038101906100e79190610882565b610268565b005b6101086004803603810190610103919061083d565b6102b4565b604051610116929190610aa7565b60405180910390f35b6101276104a6565b6040516101349190610af2565b60405180910390f35b6101456104cc565b005b61014f6104e0565b60405161015c9190610a8c565b60405180910390f35b61017f600480360381019061017a91906108ab565b610509565b005b61019b600480360381019061019691906107eb565b610555565b005b600082828101906101ae91906108d4565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352e80c64826040518263ffffffff1660e01b815260040161020b9190610b4d565b600060405180830381600087803b15801561022557600080fd5b505af1158015610239573d6000803e3d6000fd5b50505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102706105d9565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000606060008085858101906102ca9190610926565b9150915060006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037291906108fd565b61037c9190610b95565b90506000828261038c9190610b95565b90506000848361039c9190610b95565b905060008290505b81811161049957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0982e2c826040518263ffffffff1660e01b81526004016104069190610b4d565b60206040518083038186803b15801561041e57600080fd5b505afa158015610432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104569190610814565b156104865760019750806040516020016104709190610b4d565b6040516020818303038152906040529650610499565b808061049190610cb0565b9150506103a4565b5050505050509250929050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104d46105d9565b6104de6000610657565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105116105d9565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61055d6105d9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490610b0d565b60405180910390fd5b6105d681610657565b50565b6105e161071b565b73ffffffffffffffffffffffffffffffffffffffff166105ff6104e0565b73ffffffffffffffffffffffffffffffffffffffff1614610655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064c90610b2d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061073281610d39565b92915050565b60008151905061074781610d50565b92915050565b60008083601f84011261075f57600080fd5b8235905067ffffffffffffffff81111561077857600080fd5b60208301915083600182028301111561079057600080fd5b9250929050565b6000813590506107a681610d67565b92915050565b6000813590506107bb81610d7e565b92915050565b6000813590506107d081610d95565b92915050565b6000815190506107e581610d95565b92915050565b6000602082840312156107fd57600080fd5b600061080b84828501610723565b91505092915050565b60006020828403121561082657600080fd5b600061083484828501610738565b91505092915050565b6000806020838503121561085057600080fd5b600083013567ffffffffffffffff81111561086a57600080fd5b6108768582860161074d565b92509250509250929050565b60006020828403121561089457600080fd5b60006108a284828501610797565b91505092915050565b6000602082840312156108bd57600080fd5b60006108cb848285016107ac565b91505092915050565b6000602082840312156108e657600080fd5b60006108f4848285016107c1565b91505092915050565b60006020828403121561090f57600080fd5b600061091d848285016107d6565b91505092915050565b6000806040838503121561093957600080fd5b6000610947858286016107c1565b9250506020610958858286016107c1565b9150509250929050565b61096b81610bc9565b82525050565b61097a81610bdb565b82525050565b600061098b82610b68565b6109958185610b73565b93506109a5818560208601610c7d565b6109ae81610d28565b840191505092915050565b6109c281610c35565b82525050565b6109d181610c59565b82525050565b60006109e4602683610b84565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610a4a602083610b84565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b610a8681610c2b565b82525050565b6000602082019050610aa16000830184610962565b92915050565b6000604082019050610abc6000830185610971565b8181036020830152610ace8184610980565b90509392505050565b6000602082019050610aec60008301846109b9565b92915050565b6000602082019050610b0760008301846109c8565b92915050565b60006020820190508181036000830152610b26816109d7565b9050919050565b60006020820190508181036000830152610b4681610a3d565b9050919050565b6000602082019050610b626000830184610a7d565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610ba082610c2b565b9150610bab83610c2b565b925082821015610bbe57610bbd610cf9565b5b828203905092915050565b6000610bd482610c0b565b9050919050565b60008115159050919050565b6000610bf282610bc9565b9050919050565b6000610c0482610bc9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c4082610c47565b9050919050565b6000610c5282610c0b565b9050919050565b6000610c6482610c6b565b9050919050565b6000610c7682610c0b565b9050919050565b60005b83811015610c9b578082015181840152602081019050610c80565b83811115610caa576000848401525b50505050565b6000610cbb82610c2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cee57610ced610cf9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b610d4281610bc9565b8114610d4d57600080fd5b50565b610d5981610bdb565b8114610d6457600080fd5b50565b610d7081610be7565b8114610d7b57600080fd5b50565b610d8781610bf9565b8114610d9257600080fd5b50565b610d9e81610c2b565b8114610da957600080fd5b5056fea264697066735822122019ab5f15f8dbcb562f1ed69f67870f109ef4898d4d1371de0a64a576430ad8e864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.",
        "params": {
          "checkData": "specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."
        },
        "returns": {
          "performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.",
          "upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."
      },
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/UpkeepTakeProfit.sol:UpkeepTakeProfit",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2736,
        "contract": "contracts/UpkeepTakeProfit.sol:UpkeepTakeProfit",
        "label": "takeProfit",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITakeProfit)1332"
      },
      {
        "astId": 2739,
        "contract": "contracts/UpkeepTakeProfit.sol:UpkeepTakeProfit",
        "label": "positionsManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPositionsManager)1234"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionsManager)1234": {
        "encoding": "inplace",
        "label": "contract IPositionsManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITakeProfit)1332": {
        "encoding": "inplace",
        "label": "contract ITakeProfit",
        "numberOfBytes": "20"
      }
    }
  }
}