{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/IClonableBeaconProxy.sol": {
      "content": "pragma solidity 0.8.0;\n\ninterface IClonableBeaconProxy {\n\n    struct UpkeepInfo {\n        address target;\n        uint32 executeGas;\n        bytes checkData;\n        uint96 balance;\n        address admin;\n        uint64 maxValidBlocknumber;\n        uint32 lastPerformBlockNumber;\n        uint96 amountSpent;\n        bool paused;\n        bytes offchainConfig;\n    }\n\n    function transferAndCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool success);\n\n    function getUpkeep(uint256 id) external view returns (UpkeepInfo memory upkeepInfo);\n}"
    },
    "contracts/IPositionsManager.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity 0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IPositionsManager is IERC721 {\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\n    function nextTokenId() external view returns (uint256);\n}"
    },
    "contracts/ITakeProfit.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Sharwa.Finance\n * Copyright (C) 2023 Sharwa.Finance\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\npragma solidity 0.8.0;\n\ninterface ITakeProfit {\n    // STRUCTS //\n\n    /**\n     * @dev Struct representing take profit information for a financial instrument.\n     * @notice A `TakeInfo` with zero values indicates an inactive state.\n     */\n    struct TakeInfo {\n        uint256 upperStopPrice; // The upper price threshold at which the take profit order triggers.         \n        uint256 lowerStopPrice; // The lower price threshold at which the take profit order triggers.       \n    }\n\n    // OWNER FUNCTIONS //\n\n    /**\n     * @dev Updates the global time to execution for all take profit orders.\n     * @param newGlobalTimeToExecution The new global time duration, in seconds, before take profit orders are executed.\n     * Requirements:\n     * - Only the contract owner can set the new global time to execution.\n     */\n    function setGlobalTimeToExecution(uint256 newGlobalTimeToExecution) external;\n\n    // VIEW FUNCTIONS //\n\n    /**\n     * @dev Retrieves the payoff amount for a specific token ID.\n     * \n     * @param tokenId The unique identifier of the token for which the payoff amount is requested.\n     * \n     * @return The calculated payoff amount for the specified token.\n     */\n    function getPayOffAmount(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @dev Retrieves the current price for a specific token ID.\n     * \n     * @param tokenId The unique identifier of the token for which the current price is requested.\n     * \n     * @return The current price for the specified token in the form of a uint256.\n     * \n     * Requirements:\n     * - The price retrieved must not be zero, indicating a valid price.\n     */\n    function getCurrentPrice(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @dev Retrieves the expiration time for a specific token ID.\n     * \n     * @param tokenId The unique identifier of the token for which the expiration time is requested.\n     * \n     * @return The expiration time for the specified token in the form of a uint256.\n     */\n    function getExpirationTime(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @dev Checks if the take profit conditions for a specific token have been triggered.\n     * \n     * @param tokenId The unique identifier of the token for which take profit is being checked.\n     * \n     * @return takeProfitTriggered Boolean indicating whether the take profit conditions have been triggered or not.\n    */\n    function checkTakeProfit(uint256 tokenId) external view returns (bool takeProfitTriggered);\n\n    // EXTERNAL FUNCTIONS //\n\n    /**\n     * @dev Sets the take profit conditions for a specific token.\n     * \n     * @param tokenId The unique identifier of the token for which take profit is being set.\n     * @param takeProfitParams A `TakeInfo` struct containing the upper and lower stop prices.\n     * \n     * Requirements:\n     * - The caller must be the owner of the token.\n     * - The contract must be approved to manage the specified token.\n     * - The token's expiration date must not have passed.\n     */\n    function setTakeProfit(\n        uint256 tokenId, \n        TakeInfo calldata takeProfitParams\n    ) external;\n\n    /**\n     * @dev Deletes the take profit configuration for a specific token.\n     * \n     * This function allows the owner of a specified token to delete the associated take profit configuration.\n     * \n     * @param tokenId The unique identifier of the token for which the take profit is being deleted.\n     * \n     * Requirements:\n     * - The caller must be the owner of the token.\n     * - A valid take profit configuration must exist for the token.\n     */\n    function deleteTakeProfit(uint256 tokenId) external;\n\n    /**\n     * @dev Executes the take profit for a specific token.\n     * \n     * This function allows a user to execute the take profit conditions for a specified token.\n     * If the take profit conditions are met, the associated action, such as transferring the token and\n     * potentially paying off the profit, is executed.\n     * \n     * @param tokenId The unique identifier of the token for which the take profit is being executed.\n     * \n     * Requirements:\n     * - The take profit conditions must be met for the specified token.\n     */\n    function executeTakeProfit(uint256 tokenId) external;\n\n    // EVENTS // \n\n    /**\n     * @dev An event emitted when a take profit configuration is set for a tokenized option.\n     * \n     * This event is triggered when a user successfully sets a take profit configuration for a specific tokenized option.\n     * It includes details such as the token's unique identifier, upper and lower stop price conditions, \n     * which define the range for triggering the take profit, and indicate when the take profit conditions are met.\n     * \n     * @param tokenId The unique identifier of the token for which the take profit is being set.\n     * @param user The address of the user setting the take profit configuration.\n     * @param upperStopPrice The upper stop price condition for take profit (greater than or equal to).\n     * @param lowerStopPrice The lower stop price condition for take profit (less than or equal to).\n     */\n    event TakeProfitSet(\n        uint256 indexed tokenId, \n        address indexed user,\n        uint256 upperStopPrice,\n        uint256 lowerStopPrice\n    );\n    \n    /**\n     * @dev An event emitted when a take profit configuration is deleted for a tokenized option.\n     * \n     * This event is triggered when a user successfully deletes the take profit configuration for a specific tokenized option.\n     * It includes the unique identifier of the token for which the take profit configuration is deleted.\n     * \n     * @param tokenId The unique identifier of the token for which the take profit configuration is deleted.\n     */\n    event TakeProfitDeleted(uint256 indexed tokenId);\n    \n    /**\n     * @dev An event emitted when a take profit is executed for a tokenized option.\n     * \n     * This event is triggered when a take profit is successfully executed for a specific tokenized option.\n     * It includes the unique identifier of the token for which the take profit is executed.\n     * \n     * @param tokenId The unique identifier of the token for which the take profit is executed.\n     */\n    event TakeProfitExecuted(\n        uint256 indexed tokenId,\n        address indexed user\n    );\n}"
    },
    "contracts/UpkeepBalances.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\nimport {AutomationCompatibleInterface} from \"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ITakeProfit} from \"./ITakeProfit.sol\";\nimport {IPositionsManager} from \"./IPositionsManager.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IClonableBeaconProxy} from \"./IClonableBeaconProxy.sol\";\n\ncontract UpkeepBalances is \n    AutomationCompatibleInterface,\n    Ownable\n{\n    uint256 public minBalance = 5e18;\n    uint256 public provideAmount = 1e18;\n    IERC20 public token;\n    IClonableBeaconProxy public beacon;\n\n    uint256[] public upkeepIds;\n\n    constructor(\n        IERC20 _token,\n        IClonableBeaconProxy _beacon\n    ) {\n        token = _token;\n        beacon = _beacon;\n    }\n\n    // OWNER FUNCTIONS //\n\n    function addUpkeepId(uint256 id) external onlyOwner {\n        upkeepIds.push(id);\n    }\n\n    function withdraw(uint256 amount) external onlyOwner {\n        token.transfer(msg.sender, amount);\n    }\n\n    function setProvideAmount(uint256 newProvideAmount) external onlyOwner {\n        provideAmount = newProvideAmount;\n    }\n\n    function setMinBalance(uint256 newMinBalance) external onlyOwner {\n        minBalance = newMinBalance;\n    }\n\n    function setBeacon(IClonableBeaconProxy newBeacon) external onlyOwner {\n        beacon = newBeacon;\n    }\n\n    // VIEW FUNCTIONS //\n\n    function getUpkeepBalance(uint256 id) public view returns(uint256 balance) {\n        IClonableBeaconProxy.UpkeepInfo memory upkeepData = beacon.getUpkeep(id);\n        balance = uint256(upkeepData.balance);\n    }\n\n    // EXTERNAL FUNCTIONS // \n\n    function checkUpkeep(\n        bytes calldata /* checkData */\n    )\n        external\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory performData)\n    {\n        upkeepNeeded = false;\n        for (uint256 i = 0; i < upkeepIds.length; i++) {\n            if (getUpkeepBalance(upkeepIds[i]) < minBalance) {\n                upkeepNeeded = true;\n                performData = abi.encode(upkeepIds[i]);\n                break;\n            }\n        }\n        return (upkeepNeeded, performData);\n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        (uint256 id) = abi.decode(\n            performData,\n            (uint256)\n        );\n        if (getUpkeepBalance(id) < minBalance) {\n            beacon.transferAndCall(\n                address(beacon),\n                provideAmount,\n                abi.encode(id)\n            );\n        }\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}