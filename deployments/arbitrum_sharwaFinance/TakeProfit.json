{
  "address": "0x82eB18DF7EE430278872e821AaEAaf754a5337F8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operationalTreasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TakeProfitDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "TakeProfitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperStopPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowerStopPrice",
          "type": "uint256"
        }
      ],
      "name": "TakeProfitSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkTakeProfit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "takeProfitTriggered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deleteTakeProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "executeTakeProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getExpirationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPayOffAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalTimeToExecution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isOptionActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationalTreasury",
      "outputs": [
        {
          "internalType": "contract IOperationalTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IPositionsManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newGlobalTimeToExecution",
          "type": "uint256"
        }
      ],
      "name": "setGlobalTimeToExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "upperStopPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerStopPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITakeProfit.TakeInfo",
          "name": "takeProfitParams",
          "type": "tuple"
        }
      ],
      "name": "setTakeProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToTakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "upperStopPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lowerStopPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f8ade84147c1670d64a14ff5b422d27bf206f2f37c0497485ac1d2aeccba6f3",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x82eB18DF7EE430278872e821AaEAaf754a5337F8",
    "transactionIndex": 6,
    "gasUsed": "10096683",
    "logsBloom": "0x
    "blockHash": "0xf4f0899bd7668334377aee8ba21c1ca5f99721449b3ce9e63eaee519ff9bd5f8",
    "transactionHash": "0x5f8ade84147c1670d64a14ff5b422d27bf206f2f37c0497485ac1d2aeccba6f3",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 163949630,
        "transactionHash": "0x5f8ade84147c1670d64a14ff5b422d27bf206f2f37c0497485ac1d2aeccba6f3",
        "address": "0x82eB18DF7EE430278872e821AaEAaf754a5337F8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xf4f0899bd7668334377aee8ba21c1ca5f99721449b3ce9e63eaee519ff9bd5f8"
      }
    ],
    "blockNumber": 163949630,
    "cumulativeGasUsed": "15381819",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5Fe380D68fEe022d8acd42dc4D36FbfB249a76d5",
    "0xec096ea6eB9aa5ea689b0CF00882366E92377371"
  ],
  "numDeployments": 1,
  "solcInputHash": "0be94695067f2f67376620a82ee9f97f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operationalTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TakeProfitDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TakeProfitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperStopPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerStopPrice\",\"type\":\"uint256\"}],\"name\":\"TakeProfitSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkTakeProfit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"takeProfitTriggered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteTakeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"executeTakeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getExpirationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPayOffAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalTimeToExecution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isOptionActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationalTreasury\",\"outputs\":[{\"internalType\":\"contract IOperationalTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IPositionsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGlobalTimeToExecution\",\"type\":\"uint256\"}],\"name\":\"setGlobalTimeToExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"upperStopPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerStopPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ITakeProfit.TakeInfo\",\"name\":\"takeProfitParams\",\"type\":\"tuple\"}],\"name\":\"setTakeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToTakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upperStopPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerStopPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"details\":\"A contract that enables users to set and execute take-profit orders on ERC721 tokens.\",\"kind\":\"dev\",\"methods\":{\"checkTakeProfit(uint256)\":{\"details\":\"Checks if the take profit conditions for a specific token have been triggered. \",\"params\":{\"tokenId\":\"The unique identifier of the token for which take profit is being checked. \"},\"returns\":{\"takeProfitTriggered\":\"Boolean indicating whether the take profit conditions have been triggered or not.\"}},\"deleteTakeProfit(uint256)\":{\"details\":\"Deletes the take profit configuration for a specific token.  This function allows the owner of a specified token to delete the associated take profit configuration. \",\"params\":{\"tokenId\":\"The unique identifier of the token for which the take profit is being deleted.  Requirements: - The caller must be the owner of the token. - A valid take profit configuration must exist for the token.\"}},\"executeTakeProfit(uint256)\":{\"details\":\"Executes the take profit for a specific token.  This function allows a user to execute the take profit conditions for a specified token. If the take profit conditions are met, the associated action, such as transferring the token and potentially paying off the profit, is executed. \",\"params\":{\"tokenId\":\"The unique identifier of the token for which the take profit is being executed.  Requirements: - The take profit conditions must be met for the specified token.\"}},\"getCurrentPrice(uint256)\":{\"details\":\"Retrieves the current price for a specific token ID. \",\"params\":{\"tokenId\":\"The unique identifier of the token for which the current price is requested. \"},\"returns\":{\"_0\":\"The current price for the specified token in the form of a uint256.  Requirements: - The price retrieved must not be zero, indicating a valid price.\"}},\"getExpirationTime(uint256)\":{\"details\":\"Retrieves the expiration time for a specific token ID. \",\"params\":{\"tokenId\":\"The unique identifier of the token for which the expiration time is requested. \"},\"returns\":{\"_0\":\"The expiration time for the specified token in the form of a uint256.\"}},\"getPayOffAmount(uint256)\":{\"details\":\"Retrieves the payoff amount for a specific token ID. \",\"params\":{\"tokenId\":\"The unique identifier of the token for which the payoff amount is requested. \"},\"returns\":{\"_0\":\"The calculated payoff amount for the specified token.\"}},\"isOptionActive(uint256)\":{\"details\":\"Checks whether a specific option with the given tokenId is currently active.  An active option means that it is in the 'Locked' state within the operational treasury. \",\"params\":{\"tokenId\":\"The unique identifier of the option token being checked. \"},\"returns\":{\"_0\":\"A boolean value indicating whether the option is currently active (true) or not (false).\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setGlobalTimeToExecution(uint256)\":{\"details\":\"Updates the global time to execution for all take profit orders.\",\"params\":{\"newGlobalTimeToExecution\":\"The new global time duration, in seconds, before take profit orders are executed. Requirements: - Only the contract owner can set the new global time to execution.\"}},\"setTakeProfit(uint256,(uint256,uint256))\":{\"details\":\"Sets the take profit conditions for a specific token. \",\"params\":{\"takeProfitParams\":\"A `TakeInfo` struct containing the upper and lower stop prices.  Requirements: - The caller must be the owner of the token. - The token's expiration date must not have passed.\",\"tokenId\":\"The unique identifier of the token for which take profit is being set.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TakeProfit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TakeProfit.sol\":\"TakeProfit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IHegicStrategy.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\ninterface IHegicStrategy {\\n    /**\\n     * @return The address of the price provider.\\n     */\\n    function priceProvider() external view returns (address);\\n\\n    /**\\n     * @param optionID The ID of the option.\\n     * @return The profit amount for the specified option.\\n     */\\n    function payOffAmount(uint256 optionID)\\n        external\\n        view\\n        returns (uint256);\\n}\",\"keccak256\":\"0x49ad8b3b6ee2553e8d28cede2d48e6ed86ce7492fa2298e64ba8025aaed702a0\"},\"contracts/IOperationalTreasury.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\nimport {IHegicStrategy} from \\\"./IHegicStrategy.sol\\\";\\n\\ninterface IOperationalTreasury {\\n    enum LockedLiquidityState { Unlocked, Locked }\\n\\n    /**\\n     * @param positionID The position ID to pay off.\\n     * @param account The address to receive the pay off.\\n     */\\n    function payOff(uint256 positionID, address account) external;\\n\\n    /**\\n     * @param id The locked liquidity ID.\\n     * @return state The state of the locked liquidity.\\n     * @return strategy The strategy associated with the locked liquidity.\\n     * @return negativepnl The negative profit and loss value.\\n     * @return positivepnl The positive profit and loss value.\\n     * @return expiration The expiration time of the locked liquidity.\\n     */\\n    function lockedLiquidity(uint256 id)\\n        external\\n        view\\n        returns (\\n            LockedLiquidityState state,\\n            IHegicStrategy strategy,\\n            uint128 negativepnl,\\n            uint128 positivepnl,\\n            uint32 expiration\\n        );\\n}\",\"keccak256\":\"0x244cba8d63b331271145cac5bd308dcf4b22da402d6acc5065d78cfe4b2c3452\"},\"contracts/IPositionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPositionsManager is IERC721 {\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n    function nextTokenId() external view returns (uint256);\\n}\",\"keccak256\":\"0x4c06bde46851de7230590243a139284144be18d58b6ec44febd55a9274aa600b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/ITakeProfit.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Sharwa.Finance\\n * Copyright (C) 2023 Sharwa.Finance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.0;\\n\\ninterface ITakeProfit {\\n    // STRUCTS //\\n\\n    /**\\n     * @dev Struct representing take profit information for a financial instrument.\\n     * @notice A `TakeInfo` with zero values indicates an inactive state.\\n     */\\n    struct TakeInfo {\\n        uint256 upperStopPrice; // The upper price threshold at which the take profit order triggers.         \\n        uint256 lowerStopPrice; // The lower price threshold at which the take profit order triggers.       \\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev Updates the global time to execution for all take profit orders.\\n     * @param newGlobalTimeToExecution The new global time duration, in seconds, before take profit orders are executed.\\n     * Requirements:\\n     * - Only the contract owner can set the new global time to execution.\\n     */\\n    function setGlobalTimeToExecution(uint256 newGlobalTimeToExecution) external;\\n\\n    // VIEW FUNCTIONS //\\n\\n    /**\\n     * @dev Retrieves the payoff amount for a specific token ID.\\n     * \\n     * @param tokenId The unique identifier of the token for which the payoff amount is requested.\\n     * \\n     * @return The calculated payoff amount for the specified token.\\n     */\\n    function getPayOffAmount(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the current price for a specific token ID.\\n     * \\n     * @param tokenId The unique identifier of the token for which the current price is requested.\\n     * \\n     * @return The current price for the specified token in the form of a uint256.\\n     * \\n     * Requirements:\\n     * - The price retrieved must not be zero, indicating a valid price.\\n     */\\n    function getCurrentPrice(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the expiration time for a specific token ID.\\n     * \\n     * @param tokenId The unique identifier of the token for which the expiration time is requested.\\n     * \\n     * @return The expiration time for the specified token in the form of a uint256.\\n     */\\n    function getExpirationTime(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Checks whether a specific option with the given tokenId is currently active.\\n     * \\n     * An active option means that it is in the 'Locked' state within the operational treasury.\\n     * \\n     * @param tokenId The unique identifier of the option token being checked.\\n     * \\n     * @return A boolean value indicating whether the option is currently active (true) or not (false).\\n     */\\n    function isOptionActive(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if the take profit conditions for a specific token have been triggered.\\n     * \\n     * @param tokenId The unique identifier of the token for which take profit is being checked.\\n     * \\n     * @return takeProfitTriggered Boolean indicating whether the take profit conditions have been triggered or not.\\n    */\\n    function checkTakeProfit(uint256 tokenId) external view returns (bool takeProfitTriggered);\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev Sets the take profit conditions for a specific token.\\n     * \\n     * @param tokenId The unique identifier of the token for which take profit is being set.\\n     * @param takeProfitParams A `TakeInfo` struct containing the upper and lower stop prices.\\n     * \\n     * Requirements:\\n     * - The caller must be the owner of the token.\\n     * - The token's expiration date must not have passed.\\n     */\\n    function setTakeProfit(\\n        uint256 tokenId, \\n        TakeInfo calldata takeProfitParams\\n    ) external;\\n\\n    /**\\n     * @dev Deletes the take profit configuration for a specific token.\\n     * \\n     * This function allows the owner of a specified token to delete the associated take profit configuration.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit is being deleted.\\n     * \\n     * Requirements:\\n     * - The caller must be the owner of the token.\\n     * - A valid take profit configuration must exist for the token.\\n     */\\n    function deleteTakeProfit(uint256 tokenId) external;\\n\\n    /**\\n     * @dev Executes the take profit for a specific token.\\n     * \\n     * This function allows a user to execute the take profit conditions for a specified token.\\n     * If the take profit conditions are met, the associated action, such as transferring the token and\\n     * potentially paying off the profit, is executed.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit is being executed.\\n     * \\n     * Requirements:\\n     * - The take profit conditions must be met for the specified token.\\n     */\\n    function executeTakeProfit(uint256 tokenId) external;\\n\\n    // EVENTS // \\n\\n    /**\\n     * @dev An event emitted when a take profit configuration is set for a tokenized option.\\n     * \\n     * This event is triggered when a user successfully sets a take profit configuration for a specific tokenized option.\\n     * It includes details such as the token's unique identifier, upper and lower stop price conditions, \\n     * which define the range for triggering the take profit, and indicate when the take profit conditions are met.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit is being set.\\n     * @param user The address of the user setting the take profit configuration.\\n     * @param upperStopPrice The upper stop price condition for take profit (greater than or equal to).\\n     * @param lowerStopPrice The lower stop price condition for take profit (less than or equal to).\\n     */\\n    event TakeProfitSet(\\n        uint256 indexed tokenId, \\n        address indexed user,\\n        uint256 upperStopPrice,\\n        uint256 lowerStopPrice\\n    );\\n    \\n    /**\\n     * @dev An event emitted when a take profit configuration is deleted for a tokenized option.\\n     * \\n     * This event is triggered when a user successfully deletes the take profit configuration for a specific tokenized option.\\n     * It includes the unique identifier of the token for which the take profit configuration is deleted.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit configuration is deleted.\\n     */\\n    event TakeProfitDeleted(uint256 indexed tokenId);\\n    \\n    /**\\n     * @dev An event emitted when a take profit is executed for a tokenized option.\\n     * \\n     * This event is triggered when a take profit is successfully executed for a specific tokenized option.\\n     * It includes the unique identifier of the token for which the take profit is executed.\\n     * \\n     * @param tokenId The unique identifier of the token for which the take profit is executed.\\n     * @param user The address of the user setting the take profit configuration.\\n     */\\n    event TakeProfitExecuted(\\n        uint256 indexed tokenId,\\n        address indexed user\\n    );\\n}\",\"keccak256\":\"0x76ed7b8b70cea58bd7237732bb1a69e73bd198196db16cc51c72a1943804d295\",\"license\":\"GPL-3.0-or-later\"},\"contracts/TakeProfit.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Sharwa.Finance\\n * Copyright (C) 2023 Sharwa.Finance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IOperationalTreasury, IHegicStrategy} from \\\"./IOperationalTreasury.sol\\\";\\nimport {ITakeProfit} from \\\"./ITakeProfit.sol\\\";\\nimport {IPositionsManager} from \\\"./IPositionsManager.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title TakeProfit\\n * @author 0nika0\\n * @dev A contract that enables users to set and execute take-profit orders on ERC721 tokens.\\n */\\ncontract TakeProfit is ITakeProfit, Ownable {\\n\\n    IPositionsManager public positionManager;\\n    IOperationalTreasury public operationalTreasury;\\n\\n    uint256 public globalTimeToExecution = 30 minutes;\\n\\n    mapping(uint256 => TakeInfo) public tokenIdToTakeInfo;\\n\\n    constructor(\\n        address _positionManager, \\n        address _operationalTreasury\\n    ) {\\n        positionManager = IPositionsManager(_positionManager);\\n        operationalTreasury = IOperationalTreasury(_operationalTreasury);\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    function setGlobalTimeToExecution(uint256 newGlobalTimeToExecution) external override onlyOwner {\\n        globalTimeToExecution = newGlobalTimeToExecution;\\n    }\\n\\n    // VIEW FUNCTIONS // \\n\\n    function getPayOffAmount(uint256 tokenId) public view override returns (uint256) {\\n        (, IHegicStrategy strategy, , , ) = operationalTreasury.lockedLiquidity(tokenId);\\n        return strategy.payOffAmount(tokenId);\\n    } \\n\\n    function getCurrentPrice(uint256 tokenId) public view override returns (uint256) {\\n        (, IHegicStrategy strategy, , , ) = operationalTreasury.lockedLiquidity(tokenId);\\n        (, int256 latestPrice, , , ) = AggregatorV3Interface(strategy.priceProvider()).latestRoundData();\\n        require(latestPrice != 0, \\\"invalid price\\\");\\n        return uint256(latestPrice);\\n    }\\n\\n    function getExpirationTime(uint256 tokenId) public view override returns (uint256) {\\n        (, , , , uint32 expiration) = operationalTreasury.lockedLiquidity(tokenId);\\n        return uint256(expiration);\\n    }\\n\\n    function isOptionActive(uint256 tokenId) public view override returns (bool) {\\n        (IOperationalTreasury.LockedLiquidityState state, , , , ) = operationalTreasury.lockedLiquidity(tokenId);\\n        return state == IOperationalTreasury.LockedLiquidityState.Locked;\\n    }\\n    \\n    function checkTakeProfit(uint256 tokenId) public view override returns (bool takeProfitTriggered) {\\n        TakeInfo memory takenInfo = tokenIdToTakeInfo[tokenId];\\n\\n        if (!(positionManager.isApprovedOrOwner(address(this), tokenId) && getPayOffAmount(tokenId) > 0 && isOptionActive(tokenId))) {\\n            return false;\\n        }\\n\\n        if (block.timestamp > getExpirationTime(tokenId) - globalTimeToExecution) {\\n            return true;\\n        }\\n\\n        uint256 currentPrice = getCurrentPrice(tokenId);\\n\\n        return takenInfo.upperStopPrice != 0 && currentPrice >= takenInfo.upperStopPrice ||\\n                    takenInfo.lowerStopPrice != 0 && currentPrice <= takenInfo.lowerStopPrice;\\n    }\\n\\n    // EXTERANAL FUNCTIONS // \\n\\n    function setTakeProfit(uint256 tokenId, TakeInfo calldata takeProfitParams) external override {\\n        require(positionManager.ownerOf(tokenId) == msg.sender, \\\"Caller must be the owner of the token\\\");\\n\\n        require(block.timestamp < getExpirationTime(tokenId), \\\"Option expiration date has passed\\\");\\n\\n        tokenIdToTakeInfo[tokenId] = TakeInfo(\\n            takeProfitParams.upperStopPrice,\\n            takeProfitParams.lowerStopPrice\\n        );\\n\\n        emit TakeProfitSet(\\n            tokenId, \\n            msg.sender,\\n            takeProfitParams.upperStopPrice,\\n            takeProfitParams.lowerStopPrice\\n        );\\n    }\\n\\n    function deleteTakeProfit(uint256 tokenId) external override {\\n        TakeInfo memory takenInfo = tokenIdToTakeInfo[tokenId];\\n        \\n        require(positionManager.ownerOf(tokenId) == msg.sender, \\\"Caller must be the owner of the token\\\");\\n\\n        require((takenInfo.upperStopPrice == 0 && takenInfo.lowerStopPrice == 0) == false, \\\"No token set for take profit\\\");\\n\\n        delete tokenIdToTakeInfo[tokenId];\\n\\n        emit TakeProfitDeleted(tokenId);\\n    }\\n\\n    function executeTakeProfit(uint256 tokenId) external override {\\n        require(checkTakeProfit(tokenId), \\\"Take profit conditions not met\\\");\\n\\n        delete tokenIdToTakeInfo[tokenId];\\n\\n        address tokenOwner = positionManager.ownerOf(tokenId); \\n\\n        operationalTreasury.payOff(tokenId, tokenOwner);\\n\\n        emit TakeProfitExecuted(tokenId, tokenOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xf63d9b2dbdb513c155cd1e0492507cb531f143631d5346e8bf97d27ff9953158\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040526107086003553480156200001757600080fd5b5060405162001eaf38038062001eaf83398181016040528101906200003d9190620001ca565b6200005d62000051620000e760201b60201c565b620000ef60201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000259565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001c4816200023f565b92915050565b60008060408385031215620001de57600080fd5b6000620001ee85828601620001b3565b92505060206200020185828601620001b3565b9150509250929050565b600062000218826200021f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200024a816200020b565b81146200025657600080fd5b50565b611c4680620002696000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d283075111610066578063d2830751146102ae578063d66aafa6146102ca578063f162a5df146102e8578063f2fde38b1461031857610100565b80638da5cb5b14610214578063a0982e2c14610232578063c55d0f5614610262578063c5ca04231461029257610100565b806352e80c64116100d357806352e80c64146101a0578063715018a6146101bc578063791b98bc146101c6578063858684b1146101e457610100565b806312d85c30146101055780631f22194614610135578063280d8c88146101515780633323d8451461016f575b600080fd5b61011f600480360381019061011a9190611482565b610334565b60405161012c9190611979565b60405180910390f35b61014f600480360381019061014a9190611482565b610479565b005b61015961067c565b6040516101669190611979565b60405180910390f35b61018960048036038101906101849190611482565b610682565b6040516101979291906119bd565b60405180910390f35b6101ba60048036038101906101b59190611482565b6106a6565b005b6101c461089a565b005b6101ce6108ae565b6040516101db919061187e565b60405180910390f35b6101fe60048036038101906101f99190611482565b6108d4565b60405161020b9190611979565b60405180910390f35b61021c610997565b6040516102299190611804565b60405180910390f35b61024c60048036038101906102479190611482565b6109c0565b6040516102599190611848565b60405180910390f35b61027c60048036038101906102779190611482565b610b4e565b6040516102899190611979565b60405180910390f35b6102ac60048036038101906102a791906114d4565b610d53565b005b6102c860048036038101906102c39190611482565b610f59565b005b6102d2610f6b565b6040516102df9190611863565b60405180910390f35b61030260048036038101906102fd9190611482565b610f91565b60405161030f9190611848565b60405180910390f35b610332600480360381019061032d9190611390565b6110c0565b005b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633755269b846040518263ffffffff1660e01b81526004016103929190611979565b60a06040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e2919061140b565b5050509150508073ffffffffffffffffffffffffffffffffffffffff166372e08c41846040518263ffffffff1660e01b81526004016104219190611979565b60206040518083038186803b15801561043957600080fd5b505afa15801561044d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047191906114ab565b915050919050565b6000600460008381526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090503373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016105219190611979565b60206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057191906113b9565b73ffffffffffffffffffffffffffffffffffffffff16146105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be906118f9565b60405180910390fd5b60001515600082600001511480156105e3575060008260200151145b151514610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90611959565b60405180910390fd5b6004600083815260200190815260200160002060008082016000905560018201600090555050817f53adc3cdbd2a00a19712931a2336e983f4d57bc7aceddffb80e5b1641296e63a60405160405180910390a25050565b60035481565b60046020528060005260406000206000915090508060000154908060010154905082565b6106af816109c0565b6106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e5906118b9565b60405180910390fd5b60046000828152602001908152602001600020600080820160009055600182016000905550506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016107719190611979565b60206040518083038186803b15801561078957600080fd5b505afa15801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906113b9565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663914fb51883836040518363ffffffff1660e01b8152600401610820929190611994565b600060405180830381600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16827fb452b355f64927210ef7b165a3af66d8a2e22fe4364daaae20b3459a02cc70f460405160405180910390a35050565b6108a2611144565b6108ac60006111c2565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633755269b846040518263ffffffff1660e01b81526004016109329190611979565b60a06040518083038186803b15801561094a57600080fd5b505afa15801561095e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610982919061140b565b9450505050508063ffffffff16915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060046000848152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663430c208130856040518363ffffffff1660e01b8152600401610a5492919061181f565b60206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa491906113e2565b8015610ab857506000610ab684610334565b115b8015610ac95750610ac883610f91565b5b610ad7576000915050610b49565b600354610ae3846108d4565b610aed91906119f7565b421115610afe576001915050610b49565b6000610b0984610b4e565b90506000826000015114158015610b24575081600001518110155b80610b4457506000826020015114158015610b43575081602001518111155b5b925050505b919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633755269b846040518263ffffffff1660e01b8152600401610bac9190611979565b60a06040518083038186803b158015610bc457600080fd5b505afa158015610bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfc919061140b565b50505091505060008173ffffffffffffffffffffffffffffffffffffffff1663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8291906113b9565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190611510565b5050509150506000811415610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d40906118d9565b60405180910390fd5b8092505050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610dc59190611979565b60206040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1591906113b9565b73ffffffffffffffffffffffffffffffffffffffff1614610e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e62906118f9565b60405180910390fd5b610e74826108d4565b4210610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac90611919565b60405180910390fd5b60405180604001604052808260000135815260200182602001358152506004600084815260200190815260200160002060008201518160000155602082015181600101559050503373ffffffffffffffffffffffffffffffffffffffff16827f1a2c40c410c41ee2535a20d2f1df26c8b10ef3fbd2837a5bbaa8dedb477164ca83600001358460200135604051610f4d9291906119bd565b60405180910390a35050565b610f61611144565b8060038190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633755269b846040518263ffffffff1660e01b8152600401610fef9190611979565b60a06040518083038186803b15801561100757600080fd5b505afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f919061140b565b50505050905060018081111561107e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160018111156110b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14915050919050565b6110c8611144565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112f90611899565b60405180910390fd5b611141816111c2565b50565b61114c611286565b73ffffffffffffffffffffffffffffffffffffffff1661116a610997565b73ffffffffffffffffffffffffffffffffffffffff16146111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b790611939565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061129d81611b48565b92915050565b6000815190506112b281611b48565b92915050565b6000815190506112c781611b5f565b92915050565b6000815190506112dc81611b76565b92915050565b6000815190506112f181611b8d565b92915050565b60008151905061130681611b9d565b92915050565b60006040828403121561131e57600080fd5b81905092915050565b60008151905061133681611bb4565b92915050565b60008135905061134b81611bcb565b92915050565b60008151905061136081611bcb565b92915050565b60008151905061137581611be2565b92915050565b60008151905061138a81611bf9565b92915050565b6000602082840312156113a257600080fd5b60006113b08482850161128e565b91505092915050565b6000602082840312156113cb57600080fd5b60006113d9848285016112a3565b91505092915050565b6000602082840312156113f457600080fd5b6000611402848285016112b8565b91505092915050565b600080600080600060a0868803121561142357600080fd5b6000611431888289016112e2565b9550506020611442888289016112cd565b945050604061145388828901611327565b935050606061146488828901611327565b925050608061147588828901611366565b9150509295509295909350565b60006020828403121561149457600080fd5b60006114a28482850161133c565b91505092915050565b6000602082840312156114bd57600080fd5b60006114cb84828501611351565b91505092915050565b600080606083850312156114e757600080fd5b60006114f58582860161133c565b92505060206115068582860161130c565b9150509250929050565b600080600080600060a0868803121561152857600080fd5b60006115368882890161137b565b9550506020611547888289016112f7565b945050604061155888828901611351565b935050606061156988828901611351565b925050608061157a8882890161137b565b9150509295509295909350565b61159081611a2b565b82525050565b61159f81611a3d565b82525050565b6115ae81611ad1565b82525050565b6115bd81611af5565b82525050565b60006115d06026836119e6565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611636601e836119e6565b91507f54616b652070726f66697420636f6e646974696f6e73206e6f74206d657400006000830152602082019050919050565b6000611676600d836119e6565b91507f696e76616c6964207072696365000000000000000000000000000000000000006000830152602082019050919050565b60006116b66025836119e6565b91507f43616c6c6572206d75737420626520746865206f776e6572206f66207468652060008301527f746f6b656e0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061171c6021836119e6565b91507f4f7074696f6e2065787069726174696f6e20646174652068617320706173736560008301527f64000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006117826020836119e6565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006117c2601c836119e6565b91507f4e6f20746f6b656e2073657420666f722074616b652070726f666974000000006000830152602082019050919050565b6117fe81611aa1565b82525050565b60006020820190506118196000830184611587565b92915050565b60006040820190506118346000830185611587565b61184160208301846117f5565b9392505050565b600060208201905061185d6000830184611596565b92915050565b600060208201905061187860008301846115a5565b92915050565b600060208201905061189360008301846115b4565b92915050565b600060208201905081810360008301526118b2816115c3565b9050919050565b600060208201905081810360008301526118d281611629565b9050919050565b600060208201905081810360008301526118f281611669565b9050919050565b60006020820190508181036000830152611912816116a9565b9050919050565b600060208201905081810360008301526119328161170f565b9050919050565b6000602082019050818103600083015261195281611775565b9050919050565b60006020820190508181036000830152611972816117b5565b9050919050565b600060208201905061198e60008301846117f5565b92915050565b60006040820190506119a960008301856117f5565b6119b66020830184611587565b9392505050565b60006040820190506119d260008301856117f5565b6119df60208301846117f5565b9392505050565b600082825260208201905092915050565b6000611a0282611aa1565b9150611a0d83611aa1565b925082821015611a2057611a1f611b19565b5b828203905092915050565b6000611a3682611a81565b9050919050565b60008115159050919050565b6000611a5482611a2b565b9050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600069ffffffffffffffffffff82169050919050565b6000611adc82611ae3565b9050919050565b6000611aee82611a81565b9050919050565b6000611b0082611b07565b9050919050565b6000611b1282611a81565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b611b5181611a2b565b8114611b5c57600080fd5b50565b611b6881611a3d565b8114611b7357600080fd5b50565b611b7f81611a49565b8114611b8a57600080fd5b50565b60028110611b9a57600080fd5b50565b611ba681611a5b565b8114611bb157600080fd5b50565b611bbd81611a65565b8114611bc857600080fd5b50565b611bd481611aa1565b8114611bdf57600080fd5b50565b611beb81611aab565b8114611bf657600080fd5b50565b611c0281611abb565b8114611c0d57600080fd5b5056fea26469706673582212202d59be8cc4b35ede5ccbeb17615b0e8b9cb7158e0a518715dfcc813c0e7500e864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d283075111610066578063d2830751146102ae578063d66aafa6146102ca578063f162a5df146102e8578063f2fde38b1461031857610100565b80638da5cb5b14610214578063a0982e2c14610232578063c55d0f5614610262578063c5ca04231461029257610100565b806352e80c64116100d357806352e80c64146101a0578063715018a6146101bc578063791b98bc146101c6578063858684b1146101e457610100565b806312d85c30146101055780631f22194614610135578063280d8c88146101515780633323d8451461016f575b600080fd5b61011f600480360381019061011a9190611482565b610334565b60405161012c9190611979565b60405180910390f35b61014f600480360381019061014a9190611482565b610479565b005b61015961067c565b6040516101669190611979565b60405180910390f35b61018960048036038101906101849190611482565b610682565b6040516101979291906119bd565b60405180910390f35b6101ba60048036038101906101b59190611482565b6106a6565b005b6101c461089a565b005b6101ce6108ae565b6040516101db919061187e565b60405180910390f35b6101fe60048036038101906101f99190611482565b6108d4565b60405161020b9190611979565b60405180910390f35b61021c610997565b6040516102299190611804565b60405180910390f35b61024c60048036038101906102479190611482565b6109c0565b6040516102599190611848565b60405180910390f35b61027c60048036038101906102779190611482565b610b4e565b6040516102899190611979565b60405180910390f35b6102ac60048036038101906102a791906114d4565b610d53565b005b6102c860048036038101906102c39190611482565b610f59565b005b6102d2610f6b565b6040516102df9190611863565b60405180910390f35b61030260048036038101906102fd9190611482565b610f91565b60405161030f9190611848565b60405180910390f35b610332600480360381019061032d9190611390565b6110c0565b005b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633755269b846040518263ffffffff1660e01b81526004016103929190611979565b60a06040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e2919061140b565b5050509150508073ffffffffffffffffffffffffffffffffffffffff166372e08c41846040518263ffffffff1660e01b81526004016104219190611979565b60206040518083038186803b15801561043957600080fd5b505afa15801561044d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047191906114ab565b915050919050565b6000600460008381526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090503373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016105219190611979565b60206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057191906113b9565b73ffffffffffffffffffffffffffffffffffffffff16146105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be906118f9565b60405180910390fd5b60001515600082600001511480156105e3575060008260200151145b151514610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90611959565b60405180910390fd5b6004600083815260200190815260200160002060008082016000905560018201600090555050817f53adc3cdbd2a00a19712931a2336e983f4d57bc7aceddffb80e5b1641296e63a60405160405180910390a25050565b60035481565b60046020528060005260406000206000915090508060000154908060010154905082565b6106af816109c0565b6106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e5906118b9565b60405180910390fd5b60046000828152602001908152602001600020600080820160009055600182016000905550506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016107719190611979565b60206040518083038186803b15801561078957600080fd5b505afa15801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906113b9565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663914fb51883836040518363ffffffff1660e01b8152600401610820929190611994565b600060405180830381600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16827fb452b355f64927210ef7b165a3af66d8a2e22fe4364daaae20b3459a02cc70f460405160405180910390a35050565b6108a2611144565b6108ac60006111c2565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633755269b846040518263ffffffff1660e01b81526004016109329190611979565b60a06040518083038186803b15801561094a57600080fd5b505afa15801561095e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610982919061140b565b9450505050508063ffffffff16915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060046000848152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663430c208130856040518363ffffffff1660e01b8152600401610a5492919061181f565b60206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa491906113e2565b8015610ab857506000610ab684610334565b115b8015610ac95750610ac883610f91565b5b610ad7576000915050610b49565b600354610ae3846108d4565b610aed91906119f7565b421115610afe576001915050610b49565b6000610b0984610b4e565b90506000826000015114158015610b24575081600001518110155b80610b4457506000826020015114158015610b43575081602001518111155b5b925050505b919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633755269b846040518263ffffffff1660e01b8152600401610bac9190611979565b60a06040518083038186803b158015610bc457600080fd5b505afa158015610bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfc919061140b565b50505091505060008173ffffffffffffffffffffffffffffffffffffffff1663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8291906113b9565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190611510565b5050509150506000811415610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d40906118d9565b60405180910390fd5b8092505050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610dc59190611979565b60206040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1591906113b9565b73ffffffffffffffffffffffffffffffffffffffff1614610e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e62906118f9565b60405180910390fd5b610e74826108d4565b4210610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac90611919565b60405180910390fd5b60405180604001604052808260000135815260200182602001358152506004600084815260200190815260200160002060008201518160000155602082015181600101559050503373ffffffffffffffffffffffffffffffffffffffff16827f1a2c40c410c41ee2535a20d2f1df26c8b10ef3fbd2837a5bbaa8dedb477164ca83600001358460200135604051610f4d9291906119bd565b60405180910390a35050565b610f61611144565b8060038190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633755269b846040518263ffffffff1660e01b8152600401610fef9190611979565b60a06040518083038186803b15801561100757600080fd5b505afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f919061140b565b50505050905060018081111561107e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160018111156110b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14915050919050565b6110c8611144565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112f90611899565b60405180910390fd5b611141816111c2565b50565b61114c611286565b73ffffffffffffffffffffffffffffffffffffffff1661116a610997565b73ffffffffffffffffffffffffffffffffffffffff16146111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b790611939565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061129d81611b48565b92915050565b6000815190506112b281611b48565b92915050565b6000815190506112c781611b5f565b92915050565b6000815190506112dc81611b76565b92915050565b6000815190506112f181611b8d565b92915050565b60008151905061130681611b9d565b92915050565b60006040828403121561131e57600080fd5b81905092915050565b60008151905061133681611bb4565b92915050565b60008135905061134b81611bcb565b92915050565b60008151905061136081611bcb565b92915050565b60008151905061137581611be2565b92915050565b60008151905061138a81611bf9565b92915050565b6000602082840312156113a257600080fd5b60006113b08482850161128e565b91505092915050565b6000602082840312156113cb57600080fd5b60006113d9848285016112a3565b91505092915050565b6000602082840312156113f457600080fd5b6000611402848285016112b8565b91505092915050565b600080600080600060a0868803121561142357600080fd5b6000611431888289016112e2565b9550506020611442888289016112cd565b945050604061145388828901611327565b935050606061146488828901611327565b925050608061147588828901611366565b9150509295509295909350565b60006020828403121561149457600080fd5b60006114a28482850161133c565b91505092915050565b6000602082840312156114bd57600080fd5b60006114cb84828501611351565b91505092915050565b600080606083850312156114e757600080fd5b60006114f58582860161133c565b92505060206115068582860161130c565b9150509250929050565b600080600080600060a0868803121561152857600080fd5b60006115368882890161137b565b9550506020611547888289016112f7565b945050604061155888828901611351565b935050606061156988828901611351565b925050608061157a8882890161137b565b9150509295509295909350565b61159081611a2b565b82525050565b61159f81611a3d565b82525050565b6115ae81611ad1565b82525050565b6115bd81611af5565b82525050565b60006115d06026836119e6565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611636601e836119e6565b91507f54616b652070726f66697420636f6e646974696f6e73206e6f74206d657400006000830152602082019050919050565b6000611676600d836119e6565b91507f696e76616c6964207072696365000000000000000000000000000000000000006000830152602082019050919050565b60006116b66025836119e6565b91507f43616c6c6572206d75737420626520746865206f776e6572206f66207468652060008301527f746f6b656e0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061171c6021836119e6565b91507f4f7074696f6e2065787069726174696f6e20646174652068617320706173736560008301527f64000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006117826020836119e6565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006117c2601c836119e6565b91507f4e6f20746f6b656e2073657420666f722074616b652070726f666974000000006000830152602082019050919050565b6117fe81611aa1565b82525050565b60006020820190506118196000830184611587565b92915050565b60006040820190506118346000830185611587565b61184160208301846117f5565b9392505050565b600060208201905061185d6000830184611596565b92915050565b600060208201905061187860008301846115a5565b92915050565b600060208201905061189360008301846115b4565b92915050565b600060208201905081810360008301526118b2816115c3565b9050919050565b600060208201905081810360008301526118d281611629565b9050919050565b600060208201905081810360008301526118f281611669565b9050919050565b60006020820190508181036000830152611912816116a9565b9050919050565b600060208201905081810360008301526119328161170f565b9050919050565b6000602082019050818103600083015261195281611775565b9050919050565b60006020820190508181036000830152611972816117b5565b9050919050565b600060208201905061198e60008301846117f5565b92915050565b60006040820190506119a960008301856117f5565b6119b66020830184611587565b9392505050565b60006040820190506119d260008301856117f5565b6119df60208301846117f5565b9392505050565b600082825260208201905092915050565b6000611a0282611aa1565b9150611a0d83611aa1565b925082821015611a2057611a1f611b19565b5b828203905092915050565b6000611a3682611a81565b9050919050565b60008115159050919050565b6000611a5482611a2b565b9050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600069ffffffffffffffffffff82169050919050565b6000611adc82611ae3565b9050919050565b6000611aee82611a81565b9050919050565b6000611b0082611b07565b9050919050565b6000611b1282611a81565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b611b5181611a2b565b8114611b5c57600080fd5b50565b611b6881611a3d565b8114611b7357600080fd5b50565b611b7f81611a49565b8114611b8a57600080fd5b50565b60028110611b9a57600080fd5b50565b611ba681611a5b565b8114611bb157600080fd5b50565b611bbd81611a65565b8114611bc857600080fd5b50565b611bd481611aa1565b8114611bdf57600080fd5b50565b611beb81611aab565b8114611bf657600080fd5b50565b611c0281611abb565b8114611c0d57600080fd5b5056fea26469706673582212202d59be8cc4b35ede5ccbeb17615b0e8b9cb7158e0a518715dfcc813c0e7500e864736f6c63430008000033",
  "devdoc": {
    "author": "0nika0",
    "details": "A contract that enables users to set and execute take-profit orders on ERC721 tokens.",
    "kind": "dev",
    "methods": {
      "checkTakeProfit(uint256)": {
        "details": "Checks if the take profit conditions for a specific token have been triggered. ",
        "params": {
          "tokenId": "The unique identifier of the token for which take profit is being checked. "
        },
        "returns": {
          "takeProfitTriggered": "Boolean indicating whether the take profit conditions have been triggered or not."
        }
      },
      "deleteTakeProfit(uint256)": {
        "details": "Deletes the take profit configuration for a specific token.  This function allows the owner of a specified token to delete the associated take profit configuration. ",
        "params": {
          "tokenId": "The unique identifier of the token for which the take profit is being deleted.  Requirements: - The caller must be the owner of the token. - A valid take profit configuration must exist for the token."
        }
      },
      "executeTakeProfit(uint256)": {
        "details": "Executes the take profit for a specific token.  This function allows a user to execute the take profit conditions for a specified token. If the take profit conditions are met, the associated action, such as transferring the token and potentially paying off the profit, is executed. ",
        "params": {
          "tokenId": "The unique identifier of the token for which the take profit is being executed.  Requirements: - The take profit conditions must be met for the specified token."
        }
      },
      "getCurrentPrice(uint256)": {
        "details": "Retrieves the current price for a specific token ID. ",
        "params": {
          "tokenId": "The unique identifier of the token for which the current price is requested. "
        },
        "returns": {
          "_0": "The current price for the specified token in the form of a uint256.  Requirements: - The price retrieved must not be zero, indicating a valid price."
        }
      },
      "getExpirationTime(uint256)": {
        "details": "Retrieves the expiration time for a specific token ID. ",
        "params": {
          "tokenId": "The unique identifier of the token for which the expiration time is requested. "
        },
        "returns": {
          "_0": "The expiration time for the specified token in the form of a uint256."
        }
      },
      "getPayOffAmount(uint256)": {
        "details": "Retrieves the payoff amount for a specific token ID. ",
        "params": {
          "tokenId": "The unique identifier of the token for which the payoff amount is requested. "
        },
        "returns": {
          "_0": "The calculated payoff amount for the specified token."
        }
      },
      "isOptionActive(uint256)": {
        "details": "Checks whether a specific option with the given tokenId is currently active.  An active option means that it is in the 'Locked' state within the operational treasury. ",
        "params": {
          "tokenId": "The unique identifier of the option token being checked. "
        },
        "returns": {
          "_0": "A boolean value indicating whether the option is currently active (true) or not (false)."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setGlobalTimeToExecution(uint256)": {
        "details": "Updates the global time to execution for all take profit orders.",
        "params": {
          "newGlobalTimeToExecution": "The new global time duration, in seconds, before take profit orders are executed. Requirements: - Only the contract owner can set the new global time to execution."
        }
      },
      "setTakeProfit(uint256,(uint256,uint256))": {
        "details": "Sets the take profit conditions for a specific token. ",
        "params": {
          "takeProfitParams": "A `TakeInfo` struct containing the upper and lower stop prices.  Requirements: - The caller must be the owner of the token. - The token's expiration date must not have passed.",
          "tokenId": "The unique identifier of the token for which take profit is being set."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TakeProfit",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/TakeProfit.sol:TakeProfit",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2019,
        "contract": "contracts/TakeProfit.sol:TakeProfit",
        "label": "positionManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPositionsManager)1234"
      },
      {
        "astId": 2022,
        "contract": "contracts/TakeProfit.sol:TakeProfit",
        "label": "operationalTreasury",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IOperationalTreasury)1213"
      },
      {
        "astId": 2025,
        "contract": "contracts/TakeProfit.sol:TakeProfit",
        "label": "globalTimeToExecution",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2030,
        "contract": "contracts/TakeProfit.sol:TakeProfit",
        "label": "tokenIdToTakeInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TakeInfo)1241_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IOperationalTreasury)1213": {
        "encoding": "inplace",
        "label": "contract IOperationalTreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionsManager)1234": {
        "encoding": "inplace",
        "label": "contract IPositionsManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(TakeInfo)1241_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITakeProfit.TakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TakeInfo)1241_storage"
      },
      "t_struct(TakeInfo)1241_storage": {
        "encoding": "inplace",
        "label": "struct ITakeProfit.TakeInfo",
        "members": [
          {
            "astId": 1238,
            "contract": "contracts/TakeProfit.sol:TakeProfit",
            "label": "upperStopPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1240,
            "contract": "contracts/TakeProfit.sol:TakeProfit",
            "label": "lowerStopPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}